datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Contacto {
  id        Int       @id @default(autoincrement())
  email     String?   @unique @db.VarChar(50)
  telefono  String?   @db.VarChar(15)
  whatsapp  String?   @db.VarChar(15)
  instagram String?   @db.VarChar(30)
  direccion String    @db.VarChar(50)
  usuario   Usuario?
  cliente   Cliente?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  Empresa   Empresa?  @relation(fields: [empresaId], references: [id])
  empresaId Int?
}

model Empresa {
  id                   Int                    @id @default(autoincrement())
  nombre               String                 @db.VarChar(50)
  descripcion          String?                @db.VarChar(100)
  usuarios             Usuario[]
  categorias           Categoria[]
  productos            Producto[]
  facturas             Factura[]
  detallesFacturas     DetalleFactura[]
  clientes             Cliente[]
  detallesCompras      DetalleCompra[]
  Compras              Compra[]
  MovimientoInventario MovimientoInventario[]
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @default(now()) @updatedAt
  LoteProducto         LoteProducto[]
  Caja                 Caja[]
  TransaccionCompra    TransaccionCompra[]
  TransaccionVenta     TransaccionVenta[]
  Contactos            Contacto[]

  @@index([nombre], map: "empresa_nombre_idx")
}

model Categoria {
  id           Int            @id @default(autoincrement())
  nombre       String         @unique @db.VarChar(50)
  empresaId    Int
  empresa      Empresa        @relation(fields: [empresaId], references: [id])
  productos    Producto[]
  SubCategoria SubCategoria[]
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @default(now()) @updatedAt

  @@unique([empresaId, nombre], map: "empresa_categoria_unique")
  @@index([nombre])
}

model SubCategoria {
  id          Int        @id @default(autoincrement())
  nombre      String     @db.VarChar(50)
  categoriaId Int
  categoria   Categoria  @relation(fields: [categoriaId], references: [id])
  productos   Producto[]
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @default(now()) @updatedAt

  @@unique([categoriaId, nombre], map: "categoria_subcategoria_unique")
  @@index([nombre])
}

model Producto {
  id                   Int                    @id @default(autoincrement())
  codigo               String?                @db.VarChar(50)
  nombre               String                 @db.VarChar(50)
  precio               Decimal                @default(0.0) @db.Decimal(10, 2)
  stock                Int?                   @default(0)
  ubicacion            String?                @db.VarChar(40)
  descripcion          String?                @db.VarChar(300)
  estado               EstadoProducto         @default(OUTOFSTOCK)
  categoriaId          Int
  subCategoriaId       Int?
  empresaId            Int
  detallesFacturas     DetalleFactura[]
  detallesCompras      DetalleCompra[]
  empresa              Empresa                @relation(fields: [empresaId], references: [id])
  categoria            Categoria              @relation(fields: [categoriaId], references: [id])
  subCategoria         SubCategoria?          @relation(fields: [subCategoriaId], references: [id])
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @default(now()) @updatedAt
  LoteProducto         LoteProducto[]
  MovimientoInventario MovimientoInventario[]

  @@index([codigo], map: "producto_codigo_idx")
  @@index([nombre])
}

model Usuario {
  id                   Int                    @id @default(autoincrement())
  nombreUsuario        String                 @unique @db.VarChar(50)
  password             String                 @db.VarChar(100)
  contactoId           Int?                   @unique
  role                 Role                   @default(EMPLEADO)
  genero               GeneroPersona
  empresaId            Int
  estado               EstadoUsuario          @default(PENDIENTE)
  contacto             Contacto?              @relation(fields: [contactoId], references: [id])
  empresa              Empresa                @relation(fields: [empresaId], references: [id])
  facturas             Factura[]
  Compras              Compra[]
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @default(now()) @updatedAt
  MovimientoInventario MovimientoInventario[]
  MovimientosCaja      MovimientosCaja[]
  Cajas                Caja[]
  TransaccionCompra    TransaccionCompra[]
  TransaccionVenta     TransaccionVenta[]

  @@unique([empresaId, nombreUsuario], map: "empresa_usuario_unique")
}

model Cliente {
  id             Int         @id @default(autoincrement())
  identificacion String      @unique @db.VarChar(50)
  nombre         String      @db.VarChar(50)
  contactoId     Int         @unique
  tipoCliente    TipoCliente @default(FISICO)
  empresaId      Int
  contacto       Contacto?   @relation(fields: [contactoId], references: [id])
  empresa        Empresa     @relation(fields: [empresaId], references: [id])
  facturas       Factura[]
  createdAt      DateTime?   @default(now())
  updatedAt      DateTime?   @default(now()) @updatedAt
}

model Factura {
  id               Int                @id @default(autoincrement())
  codigo           String             @unique
  subtotal         Decimal            @default(0.00) @db.Decimal(10, 2)
  total            Decimal            @default(0.00) @db.Decimal(10, 2)
  itebisTotal      Decimal            @default(0.00) @db.Decimal(10, 2)
  metodoPago       MetodoPago         @default(EFECTIVO)
  usuarioId        Int
  clienteId        Int?
  clienteNombre    String?            @db.VarChar(50)
  empresaId        Int
  estado           Estado             @default(PAGADA)
  cajaId           Int?
  moneda           TipoMoneda         @default(DOP)
  empresa          Empresa            @relation(fields: [empresaId], references: [id])
  usuario          Usuario            @relation(fields: [usuarioId], references: [id])
  cliente          Cliente?           @relation(fields: [clienteId], references: [id])
  detallesFacturas DetalleFactura[]
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @default(now()) @updatedAt
  Caja             Caja?              @relation(fields: [cajaId], references: [id])
  TransaccionVenta TransaccionVenta[]

  @@index([clienteNombre], map: "factura_cliente_idx")
  @@index([createdAt])
}

model DetalleFactura {
  id                 Int               @id @default(autoincrement())
  facturaId          Int
  productoId         Int
  cantidad           Int
  precioUnitario     Decimal?          @default(0.00) @db.Decimal(10, 2)
  importe            Decimal           @default(0.00) @db.Decimal(10, 2)
  itebis             Decimal           @default(0.00) @db.Decimal(10, 2)
  empresaId          Int
  factura            Factura           @relation(fields: [facturaId], references: [id])
  empresa            Empresa           @relation(fields: [empresaId], references: [id])
  producto           Producto          @relation(fields: [productoId], references: [id])
  createdAt          DateTime?         @default(now())
  updatedAt          DateTime?         @default(now()) @updatedAt
  TransaccionVenta   TransaccionVenta? @relation(fields: [transaccionVentaId], references: [id])
  transaccionVentaId Int?

  @@index([facturaId, productoId], map: "detalle_factura_idx")
}

model Compra {
  id                Int                 @id @default(autoincrement())
  total             Decimal             @default(0.00) @db.Decimal(10, 2)
  usuarioId         Int
  empresaId         Int
  moneda            TipoMoneda          @default(DOP)
  usuario           Usuario             @relation(fields: [usuarioId], references: [id])
  empresa           Empresa             @relation(fields: [empresaId], references: [id])
  detallesCompras   DetalleCompra[]
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @default(now()) @updatedAt
  delete            Boolean             @default(false)
  canDelete         Boolean             @default(true)
  TransaccionCompra TransaccionCompra[]
  LoteProducto      LoteProducto[]

  @@index([createdAt])
  @@map("Compra")
}

model DetalleCompra {
  id                  Int                @id @default(autoincrement())
  productoId          Int?
  cantidad            Int
  precioCompra        Decimal            @db.Decimal(10, 2)
  precioVenta         Decimal            @db.Decimal(10, 2)
  subtotal            Decimal            @db.Decimal(10, 2)
  compraId            Int?
  empresaId           Int
  Compra              Compra?            @relation(fields: [compraId], references: [id])
  producto            Producto?          @relation(fields: [productoId], references: [id])
  empresa             Empresa            @relation(fields: [empresaId], references: [id])
  createdAt           DateTime?          @default(now())
  updatedAt           DateTime?          @default(now()) @updatedAt
  delete              Boolean            @default(false)
  TransaccionCompra   TransaccionCompra? @relation(fields: [transaccionCompraId], references: [id])
  transaccionCompraId Int?

  @@map("DetalleCompra")
}

model MovimientoInventario {
  id          Int            @id @default(autoincrement())
  productoId  Int
  tipo        TipoMovimiento @default(ENTRADA)
  cantidad    Int
  descripcion String?        @db.VarChar(100)
  usuarioId   Int
  producto    Producto       @relation(fields: [productoId], references: [id])
  empresaId   Int
  empresa     Empresa        @relation(fields: [empresaId], references: [id])
  usuario     Usuario        @relation(fields: [usuarioId], references: [id])
  precioVenta Decimal  @db.Decimal(10,2)  @default(0)     // Precio de venta, solo para 'SALIDA'
  precioCompra Decimal  @db.Decimal(10,2) @default(0)    // Precio de compra, solo para 'ENTRADA'
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?      @default(now()) @updatedAt
  delete      Boolean        @default(false)
}

//Este modelo contendrá los datos del lote, como la cantidad y el precio de compra
model LoteProducto {
  id                  Int                @id @default(autoincrement())
  productoId          Int
  cantidad            Int
  cantidadRestante    Int?
  empresaId           Int
  compraId            Int
  compra              Compra             @relation(fields: [compraId], references: [id])
  precioVenta         Decimal            @db.Decimal(10, 2)
  precioCompra        Decimal            @db.Decimal(10, 2)  @default(0)
  fechaEntrada        DateTime           @default(now())
  updatedAt           DateTime?          @default(now()) @updatedAt
  producto            Producto           @relation(fields: [productoId], references: [id])
  empresa             Empresa            @relation(fields: [empresaId], references: [id])
  estado              EstadoLote         @default(PENDIENTE)
  delete              Boolean            @default(false)
  TransaccionCompra   TransaccionCompra? @relation(fields: [transaccionCompraId], references: [id])
  transaccionCompraId Int?
  TransaccionVenta    TransaccionVenta?  @relation(fields: [transaccionVentaId], references: [id])
  transaccionVentaId  Int?
}

//Sstema de Cajas
model Caja {
  id             Int             @id @default(autoincrement())
  usuarioId      Int?
  nombre         String          @db.VarChar(100) // Ejemplo de restricción de longitud
  estado         EstadoCaja      @default(CERRADA)
  ubicacion      String          @db.VarChar(255)
  empresaId      Int
  empresa        Empresa         @relation(fields: [empresaId], references: [id])
  fechaEntrada   DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  historialCajas HistorialCaja[]
  facturas       Factura[]
  Usuario        Usuario?        @relation(fields: [usuarioId], references: [id])

  @@index([nombre])
}

model HistorialCaja {
  id              Int               @id @default(autoincrement())
  cajaId          Int
  caja            Caja              @relation(fields: [cajaId], references: [id])
  montoInicial    Decimal           @default(0.0) @db.Decimal(10, 2) // Control de precisión
  montoFinal      Decimal           @default(0.0) @db.Decimal(10, 2)
  estado          EstadoCaja        @default(ABIERTA)
  fechaApertura   DateTime          @default(now())
  fechaCierre     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  movimientosCaja MovimientosCaja[]
}

model MovimientosCaja {
  id              Int                @id @default(autoincrement())
  historialCajaId Int
  monto           Decimal            @default(0.0) @db.Decimal(10, 2) // Control de precisión
  tipo            tipoMovimientoCaja
  descripcion     String?
  historialCaja   HistorialCaja      @relation(fields: [historialCajaId], references: [id])
  usuarioId       Int
  usuario         Usuario            @relation(fields: [usuarioId], references: [id])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime?          @updatedAt

  @@index([historialCajaId])
  @@index([usuarioId])
}

model TransaccionCompra {
  id              Int               @id @default(autoincrement())
  compra          Compra            @relation(fields: [compraId], references: [id])
  compraId        Int
  detallesCompra  DetalleCompra[]
  lotes           LoteProducto[]
  usuario         Usuario           @relation(fields: [usuarioId], references: [id])
  usuarioId       Int
  empresa         Empresa           @relation(fields: [empresaId], references: [id])
  empresaId       Int
  estado          EstadoTransaccion @default(ACTIVA) // Estado de la transacción (ACTIVA, ANULADA, PENDIENTE)
  motivoAnulacion String? // Razón de la anulación (si aplica)
  fechaAnulacion  DateTime? // Fecha en que se anuló la transacción
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model TransaccionVenta {
  id              Int               @id @default(autoincrement())
  factura         Factura           @relation(fields: [facturaId], references: [id])
  facturaId       Int
  detalleFactura  DetalleFactura[]
  lotes           LoteProducto[]
  usuario         Usuario           @relation(fields: [usuarioId], references: [id])
  usuarioId       Int
  empresa         Empresa           @relation(fields: [empresaId], references: [id])
  empresaId       Int
  estado          EstadoTransaccion @default(ACTIVA) // Estado de la transacción (ACTIVA, ANULADA, PENDIENTE)
  motivoAnulacion String? // Razón de la anulación (si aplica)
  fechaAnulacion  DateTime? // Fecha en que se anuló la transacción
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Secuencias {
  id     Int    @id @unique @default(autoincrement())
  nombre String @unique @db.VarChar(10)
  valor  Int
}

//enums

enum TipoTransaccion {
  VENTA
  COMPRA
  INVENTARIO
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
  AJUSTE
}

enum TipoDescuento {
  FIJO
  PORCENTUAL
  Volumen
  CATEGORIA
  CLIENTE
  PROMOCIONAL
}

enum Role {
  ADMIN
  EMPLEADO
  USUARIO
  GERENTE
}

enum EstadoProducto {
  INSTOCK
  OUTOFSTOCK
  LOWSTOCK
}

enum GeneroPersona {
  MASCULINO
  FEMENINO
}

enum GeneroProducto {
  HOMBRE
  MUJER
  UNISEX
}

enum EstadoUsuario {
  HABILITADO
  INHABILITADO
  PENDIENTE
}

enum TipoCliente {
  FISCAL
  FISICO
}

enum MetodoPago {
  EFECTIVO
  TRANSFERENCIA
  TARJETA
  CREDITO
}

enum TipoMoneda {
  USD
  DOP
  EU
}

enum Estado {
  CANCELADA
  PAGADA
  PENDIENTE
}

enum EstadoCaja {
  ABIERTA
  CERRADA
}

enum tipoMovimientoCaja {
  INGRESO
  EGRESO
  VENTA
  INICIAL
  CIERRE
}

// Enum para el estado de las transacciones
enum EstadoTransaccion {
  ACTIVA
  ANULADA
  PENDIENTE
}

enum EstadoLote {
  PENDIENTE
  ACTIVO
}
