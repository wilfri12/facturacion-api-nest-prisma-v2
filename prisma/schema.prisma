datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Contacto {
  id        Int        @id @default(autoincrement())
  direccion String?    @db.VarChar(50)
  telefono  String?    @db.VarChar(15)
  email     String?    @unique @db.VarChar(50)
  instagram String?    @db.VarChar(30)
  whatsapp  String?    @db.VarChar(15)
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @default(now()) @updatedAt
  empresa   Empresa?
  usuario   Usuario?
  cliente   Cliente?
  proveedor Proveedor?
}

model Empresa {
  id                   Int                  @id @default(autoincrement())
  contactoId           Int?                 @unique
  nombre               String               @db.VarChar(50)
  descripcion          String?              @db.VarChar(100)
  createdAt            DateTime?            @default(now())
  updatedAt            DateTime?            @default(now()) @updatedAt
  contacto             Contacto?            @relation(fields: [contactoId], references: [id])
  usuarios             Usuario[]
  categorias           Categoria[]
  productos            Producto[]
  facturas             Factura[]
  detalles_facturas    DetalleFactura[]
  proveedores          Proveedor[]
  clientes             Cliente[]
  detalleOrdenesCompra DetalleOrdenCompra[]
  ordenesCompra        OrdenCompra[]
  produccion           Produccion[]
  materiaPrima         MateriaPrima[]
  detalleProduccion    DetalleProduccion[]

  @@index([nombre], map: "empresa_nombre_idx")
}

model Categoria {
  id        Int        @id @default(autoincrement())
  empresaId Int
  nombre    String     @unique @db.VarChar(20)
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @default(now()) @updatedAt
  empresa   Empresa    @relation(fields: [empresaId], references: [id])
  productos Producto[]

  @@unique([empresaId, nombre], map: "empresa_categoria_unique")
}

model Proveedor {
  id            Int            @id @default(autoincrement())
  contactoId    Int?           @unique
  empresaId     Int
  nombre        String         @db.VarChar(50)
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @default(now()) @updatedAt
  empresa       Empresa        @relation(fields: [empresaId], references: [id])
  contacto      Contacto?      @relation(fields: [contactoId], references: [id])
  ordenesCompra OrdenCompra[]
  materiaPrima  MateriaPrima[]
}

model Producto {
  id                   Int                  @id @default(autoincrement())
  stock                Int?                 @default(0)
  categoriaId          Int
  empresaId            Int
  precio               Decimal              @default(0.0) @db.Decimal(10, 2)
  nombre               String               @db.VarChar(50)
  descripcion          String?              @db.VarChar(70)
  createdAt            DateTime?            @default(now())
  updatedAt            DateTime?            @default(now()) @updatedAt
  estado               EstadoProducto       @default(OUTOFSTOCK)
  empresa              Empresa              @relation(fields: [empresaId], references: [id])
  categoria            Categoria            @relation(fields: [categoriaId], references: [id])
  detalles_facturas    DetalleFactura[]
  detalleOrdenesCompra DetalleOrdenCompra[]
  detalleProduccion    DetalleProduccion[]

  @@index([nombre], map: "producto_nombre_idx")
}

model Usuario {
  id          Int           @id @default(autoincrement())
  empresaId   Int
  contactoId  Int?          @unique
  nombre      String        @db.VarChar(50)
  password    String        @db.VarChar(20)
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @default(now()) @updatedAt
  genero      GeneroPersona
  role        Role          @default(EMPLEADO)
  estado      EstadoUsuario @default(PENDIENTE)
  contacto    Contacto?     @relation(fields: [contactoId], references: [id])
  empresa     Empresa       @relation(fields: [empresaId], references: [id])
  factura     Factura[]
  ordenCompra OrdenCompra[]

  @@unique([empresaId, nombre], map: "empresa_usuario_unique")
}

model Cliente {
  id             Int         @id @default(autoincrement())
  contactoId     Int?        @unique
  tipoCliente    TipoCliente @default(FISICO)
  empresaId      Int
  nombre         String      @db.VarChar(50)
  identificacion String      @unique @db.VarChar(50)
  createdAt      DateTime?   @default(now())
  updatedAt      DateTime?   @default(now()) @updatedAt
  contacto       Contacto?   @relation(fields: [contactoId], references: [id])
  empresa        Empresa     @relation(fields: [empresaId], references: [id])
  factura        Factura[]
}

model Factura {
  id            Int              @id @default(autoincrement())
  empresaId     Int
  usuarioId     Int?
  clienteId     Int?
  total         Decimal          @db.Decimal(10, 2)
  clienteNombre String?          @db.VarChar(50)
  createdAt     DateTime?        @default(now())
  updatedAt     DateTime?        @default(now()) @updatedAt
  empresa       Empresa          @relation(fields: [empresaId], references: [id])
  usuario       Usuario?         @relation(fields: [usuarioId], references: [id])
  cliente       Cliente?         @relation(fields: [clienteId], references: [id])
  detalles      DetalleFactura[]

  @@index([clienteNombre], map: "factura_cliente_idx")
}

model DetalleFactura {
  id             Int       @id @default(autoincrement())
  facturaId      Int
  empresaId      Int
  productoId     Int
  cantidad       Int
  precioUnitario Decimal   @db.Decimal(10, 2)
  subtotal       Decimal   @db.Decimal(10, 2)
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt
  factura        Factura   @relation(fields: [facturaId], references: [id])
  empresa        Empresa   @relation(fields: [empresaId], references: [id])
  producto       Producto  @relation(fields: [productoId], references: [id])

  @@index([facturaId, productoId], map: "detalle_factura_idx")
}

model DetalleOrdenCompra {
  id             Int          @id @default(autoincrement())
  ordenId        Int?
  productoId     Int?
  cantidad       Int
  empresaId      Int
  precioUnitario Decimal      @db.Decimal(10, 2)
  subtotal       Decimal      @db.Decimal(10, 2)
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @default(now()) @updatedAt
  ordenesCompra  OrdenCompra? @relation(fields: [ordenId], references: [id])
  producto       Producto?    @relation(fields: [productoId], references: [id])
  empresa        Empresa      @relation(fields: [empresaId], references: [id])
}

model OrdenCompra {
  id                   Int                  @id @default(autoincrement())
  proveedorId          Int?
  usuarioId            Int
  empresaId            Int
  total                Decimal              @default(0.00) @db.Decimal(10, 2)
  createdAt            DateTime?            @default(now())
  updatedAt            DateTime?            @default(now()) @updatedAt
  proveedor            Proveedor?           @relation(fields: [proveedorId], references: [id])
  usuario              Usuario              @relation(fields: [usuarioId], references: [id])
  empresa              Empresa              @relation(fields: [empresaId], references: [id])
  detalleOrdenesCompra DetalleOrdenCompra[]
}

model MateriaPrima {
  id                Int                 @id @default(autoincrement())
  empresaId         Int
  proveedorId       Int
  stock             Int?                @default(0)
  nombre            String              @db.VarChar(50)
  descripcion       String?             @db.VarChar(50)
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @default(now()) @updatedAt
  empresa           Empresa             @relation(fields: [empresaId], references: [id])
  proveedor         Proveedor           @relation(fields: [proveedorId], references: [id])
  detalleMateriaPrima DetalleMateriaPrima[]
}
model Produccion {
  id                Int                 @id @default(autoincrement())
  cantidadProducida Int
  empresaId         Int
  costoTotal        Decimal             @db.Decimal(10, 2)
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @default(now()) @updatedAt
  empresa           Empresa             @relation(fields: [empresaId], references: [id])
  detalleProduccion DetalleProduccion[]
}


model DetalleProduccion {
  id               Int                  @id @default(autoincrement())
  produccionId     Int
  empresaId        Int
  productoId       Int
  cantidadProducto Int
  createdAt        DateTime?            @default(now())
  updatedAt        DateTime?            @default(now()) @updatedAt
  empresa          Empresa              @relation(fields: [empresaId], references: [id])
  producto         Producto             @relation(fields: [productoId], references: [id])
  produccion       Produccion           @relation(fields: [produccionId], references: [id])
  detalleMateriaPrima DetalleMateriaPrima[]
}

model DetalleMateriaPrima {
  id                Int               @id @default(autoincrement())
  detalleProduccionId Int
  materiaPrimaId    Int
  cantidadMateria   Int
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @default(now()) @updatedAt
  detalleProduccion DetalleProduccion @relation(fields: [detalleProduccionId], references: [id])
  materiaPrima      MateriaPrima      @relation(fields: [materiaPrimaId], references: [id])
}


enum Role {
  ADMIN
  EMPLEADO
  USUARIO
  GERENTE
}

enum EstadoProducto {
  INSTOCK
  OUTOFSTOCK
  LOWSTOCK
}

enum GeneroPersona {
  MASCULINO
  FEMENINO
}

enum EstadoUsuario {
  HABILITADO
  INHABILITADO
  PENDIENTE
}

enum TipoCliente {
  FISCAL
  FISICO
}
