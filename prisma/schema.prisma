datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Contacto {
  id        Int        @id @default(autoincrement())
  direccion String?    @db.VarChar(50)
  telefono  String?    @db.VarChar(15)
  email     String?    @unique @db.VarChar(50)
  instagram String?    @db.VarChar(30)
  whatsapp  String?    @db.VarChar(15)
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @default(now()) @updatedAt
  empresa   Empresa?
  usuario   Usuario?
  cliente   Cliente?
  proveedor Proveedor?
}

model Empresa {
  id                   Int                  @id @default(autoincrement())
  nombre               String               @db.VarChar(50)
  descripcion          String?              @db.VarChar(100)
  contacto             Contacto?            @relation(fields: [contactoId], references: [id])
  contactoId           Int?                 @unique
  usuarios             Usuario[]
  categorias           Categoria[]
  productos            Producto[]
  facturas             Factura[]
  detalles_facturas    DetalleFactura[]
  createdAt            DateTime?            @default(now())
  updatedAt            DateTime?            @default(now()) @updatedAt
  proveedores          Proveedor[]
  clientes             Cliente[]
  detalleOrdenesCompra DetalleOrdenCompra[]
  ordenesCompra        OrdenCompra[]
  produccion           Produccion[]

  @@index([nombre], map: "empresa_nombre_idx")
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String     @db.VarChar(20)
  empresa   Empresa    @relation(fields: [empresaId], references: [id])
  empresaId Int
  productos Producto[]
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @default(now()) @updatedAt

  @@unique([empresaId, nombre], map: "empresa_categoria_unique")
}

model Proveedor {
  id            Int           @id @default(autoincrement())
  nombre        String        @db.VarChar(50)
  contacto      Contacto?     @relation(fields: [contactoId], references: [id])
  contactoId    Int?          @unique
  productos     Producto[]
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @default(now()) @updatedAt
  ordenesCompra OrdenCompra[]
  empresa       Empresa       @relation(fields: [empresaId], references: [id])
  empresaId     Int
}

model Producto {
  id                   Int                  @id @default(autoincrement())
  nombre               String               @db.VarChar(50)
  descripcion          String?              @db.VarChar(70)
  precio               Decimal              @default(0.0) @db.Decimal(10, 2)
  estado               EstadoProducto       @default(INSTOCK)
  stock                Int?
  categoria            Categoria            @relation(fields: [categoriaId], references: [id])
  categoriaId          Int
  empresa              Empresa              @relation(fields: [empresaId], references: [id])
  empresaId            Int
  proveedor            Proveedor?           @relation(fields: [proveedorId], references: [id])
  proveedorId          Int?
  detalles_facturas    DetalleFactura[]
  createdAt            DateTime?            @default(now())
  updatedAt            DateTime?            @default(now()) @updatedAt
  detalleOrdenesCompra DetalleOrdenCompra[]
  produccion           Produccion[]

  @@index([nombre], map: "producto_nombre_idx")
}

model Usuario {
  id         Int           @id @default(autoincrement())
  nombre     String        @db.VarChar(50)
  genero     Genero
  contacto   Contacto?     @relation(fields: [contactoId], references: [id])
  contactoId Int?          @unique
  password   String        @db.VarChar(20)
  role       Role          @default(EMPLEADO)
  empresa    Empresa       @relation(fields: [empresaId], references: [id])
  empresaId  Int
  estado     EstadoUsuario @default(PENDIENTE)
  createdAt  DateTime?     @default(now())
  updatedAt  DateTime?     @default(now()) @updatedAt

  @@unique([empresaId, nombre], map: "empresa_usuario_unique")
}

model Cliente {
  id             Int       @id @default(autoincrement())
  nombre         String    @db.VarChar(50)
  identificacion String    @unique @db.VarChar(50)
  contacto       Contacto? @relation(fields: [contactoId], references: [id])
  contactoId     Int?      @unique
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt
  empresa        Empresa   @relation(fields: [empresaId], references: [id])
  empresaId      Int
}

model Factura {
  id        Int              @id @default(autoincrement())
  cliente   String?          @db.VarChar(50)
  detalles  DetalleFactura[]
  empresa   Empresa          @relation(fields: [empresaId], references: [id])
  empresaId Int
  total     Decimal          @db.Decimal(10, 2)
  createdAt DateTime?        @default(now())
  updatedAt DateTime?        @default(now()) @updatedAt

  @@index([cliente], map: "factura_cliente_idx")
}

model DetalleFactura {
  id             Int       @id @default(autoincrement())
  factura        Factura   @relation(fields: [facturaId], references: [id])
  facturaId      Int
  empresa        Empresa   @relation(fields: [empresaId], references: [id])
  empresaId      Int
  producto       Producto  @relation(fields: [productoId], references: [id])
  productoId     Int
  cantidad       Int
  precioUnitario Decimal   @db.Decimal(10, 2)
  subtotal       Decimal   @db.Decimal(10, 2)
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt

  @@index([facturaId, productoId], map: "detalle_factura_idx")
}

model DetalleOrdenCompra {
  id             Int          @id @default(autoincrement())
  ordenId        Int?
  ordenesCompra  OrdenCompra? @relation(fields: [ordenId], references: [id])
  productoId     Int?
  producto       Producto?    @relation(fields: [productoId], references: [id])
  cantidad       Int
  precioUnitario Decimal      @db.Decimal(10, 2)
  subtotal       Decimal      @db.Decimal(10, 2)
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @default(now()) @updatedAt
  empresa        Empresa      @relation(fields: [empresaId], references: [id])
  empresaId      Int
}

model OrdenCompra {
  id                   Int                  @id @default(autoincrement())
  proveedorId          Int?
  proveedor            Proveedor?           @relation(fields: [proveedorId], references: [id])
  total                Decimal              @default(0.00) @db.Decimal(10, 2)
  createdAt            DateTime?            @default(now())
  updatedAt            DateTime?            @default(now()) @updatedAt
  detalleOrdenesCompra DetalleOrdenCompra[]
  empresa              Empresa              @relation(fields: [empresaId], references: [id])
  empresaId            Int
}

model Produccion {
  id                Int       @id @default(autoincrement())
  productoId        Int?
  producto          Producto? @relation(fields: [productoId], references: [id])
  cantidadProducida Int
  costoTotal        Decimal   @db.Decimal(10, 2)
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @default(now()) @updatedAt
  empresa           Empresa   @relation(fields: [empresaId], references: [id])
  empresaId         Int
}

enum Role {
  ADMIN
  CLIENTE
  EMPLEADO
  USUARIO
  GERENTES
}

enum EstadoProducto {
  INSTOCK
  OUTOFSTOCK
  DISCONTINUED
  BACKORDER
}

enum Genero {
  MASCULINO
  FEMENINO
}

enum EstadoUsuario {
  HABILITADO
  INHABILITADO
  PENDIENTE
}
