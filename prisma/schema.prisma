// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Empresa {
  id                Int               @id @default(autoincrement())
  nombre            String            @db.VarChar(50)
  direccion         String?           @db.VarChar(50)
  telefono          String?           @db.VarChar(15)
  email             String?           @unique @db.VarChar(50)
  instagram         String?           @db.VarChar(30)
  whatsapp          String?           @db.VarChar(15)
  descripcion       String?           @db.VarChar(100)
  usuarios          Usuario[]
  categorias        Categoria[]
  productos         Producto[]
  facturas          Factura[]
  detalles_facturas Detalle_factura[]
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @default(now())

  @@index([nombre], map: "empresa_nombre_idx")
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String     @db.VarChar(20)
  empresa   Empresa    @relation(fields: [empresaId], references: [id])
  empresaId Int
  productos Producto[]
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @default(now())

  @@unique([empresaId, nombre], map: "empresa_categoria_unique")
}

model Producto {
  id                Int               @id @default(autoincrement())
  nombre            String            @db.VarChar(50)
  precio            Decimal           @default(0.0) @db.Decimal(10, 2)
  estado            EstadoProducto    @default(INSTOCK)
  categoria         Categoria         @relation(fields: [categoriaId], references: [id])
  categoriaId       Int
  empresa           Empresa           @relation(fields: [empresaId], references: [id])
  empresaId         Int
  detalles_facturas Detalle_factura[]
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @default(now())

  @@index([nombre], map: "producto_nombre_idx")
}

model Usuario {
  id        Int       @id @default(autoincrement())
  nombre    String    @db.VarChar(50)
  password  String    @db.VarChar(20)
  role      Role      @default(EMPLEADO)
  empresa   Empresa   @relation(fields: [empresaId], references: [id])
  empresaId Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@unique([empresaId, nombre], map: "empresa_usuario_unique")
}

model Factura {
  id        Int               @id @default(autoincrement())
  cliente   String            @db.VarChar(50)
  detalles  Detalle_factura[]
  empresa   Empresa           @relation(fields: [empresaId], references: [id])
  empresaId Int
  createdAt DateTime?         @default(now())
  updatedAt DateTime?         @default(now())

  @@index([cliente], map: "factura_cliente_idx")
}

model Detalle_factura {
  id         Int       @id @default(autoincrement())
  factura    Factura   @relation(fields: [facturaId], references: [id])
  facturaId  Int
  empresa    Empresa   @relation(fields: [empresaId], references: [id])
  empresaId  Int
  producto   Producto  @relation(fields: [productoId], references: [id])
  productoId Int
  cantidad   Int
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())

  @@index([facturaId, productoId], map: "detalle_factura_idx")
}

enum Role {
  ADMIN
  CLIENTE
  EMPLEADO
  USUARIO
}

enum EstadoProducto {
  INSTOCK
  OUTOFSTOCK
  DISCONTINUED
}
